name: Terraform Apply and Configure VM

on:
  push:
    branches:
      - main

env:
  TERRAFORM_DIRECTORY: './terraform'
  ANSIBLE_DIRECTORY: './ansible'
  TF_VAR_location: 'East US'
  TF_VAR_resource_group_name: ${{ secrets.RESOURCE_GROUP_NAME }}
  TF_VAR_admin_username: ${{ secrets.VM_ADMIN_USERNAME }}
  TF_VAR_admin_password: ${{ secrets.VM_ADMIN_PASSWORD }}
  TF_VAR_acr_name: ${{ secrets.ACR_NAME }}
  TF_VAR_key_vault_name: ${{ secrets.KEY_VAULT_NAME }}
  VM_ADMIN_USERNAME: ${{ secrets.VM_ADMIN_USERNAME }}
  VM_ADMIN_PASSWORD: ${{ secrets.VM_ADMIN_PASSWORD }}
  REPO_CLONE_URL: ${{ github.repositoryUrl }}
  REPO_BRANCH: ${{ github.ref_name }}
  IMAGE_TAG: 'latest'

jobs:
  apply_infra:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            }

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.3"
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
        run: terraform apply -auto-approve -input=false

      - name: Get Terraform Outputs
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
        id: tf_outputs
        run: |
          echo "vm_public_ip=$(terraform output -raw vm_public_ip)" >> $GITHUB_OUTPUT
          echo "acr_login_server=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT

      - name: Save VM Public IP to Azure Key Vault
        run: |
          az keyvault secret set --vault-name ${{ secrets.KEY_VAULT_NAME }} --name vm-public-ip --value ${{ steps.tf_outputs.outputs.vm_public_ip }}
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Python
        uses: actions/setup-python@v5

      - name: Install Ansible
        run: pip install ansible

      - name: Generate Ansible Inventory
        run: |
          echo "[app]" > /tmp/ansible_hosts
          echo "vm_host ansible_host=${{ steps.tf_outputs.outputs.vm_public_ip }} ansible_user=${{ env.VM_ADMIN_USERNAME }} ansible_ssh_pass=${{ env.VM_ADMIN_PASSWORD }}" >> /tmp/ansible_hosts
          cat /tmp/ansible_hosts # Muestra el inventario generado en los logs

      - name: Run Ansible Playbook
        working-directory: ${{ env.ANSIBLE_DIRECTORY }}
        run: >
          ansible-playbook -i /tmp/ansible_hosts ansible-playbook.yaml
          --extra-vars "repo_clone_url=${{ env.REPO_CLONE_URL }}"
          --extra-vars "repo_branch=${{ env.REPO_BRANCH }}"
          --extra-vars "acr_login_server=${{ steps.tf_outputs.outputs.acr_login_server }}"
          --extra-vars "image_tag=${{ env.IMAGE_TAG }}"

      - name: Azure Logout
        run: az logout