name: Deploy Container Apps Infrastructure
on:
  push:
    branches:
      - main
      - migrate-to-azure
  workflow_dispatch:
    inputs:
      deploy_services:
        description: 'Desplegar servicios con imÃ¡genes de ACR'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
# r
env:
  TERRAFORM_DIRECTORY: './terraform'
  TF_VAR_location: 'East US'
  TF_VAR_resource_group_name: ${{ secrets.RESOURCE_GROUP_NAME }}
  TF_VAR_acr_name: ${{ secrets.ACR_NAME }}
  TF_VAR_key_vault_name: ${{ secrets.KEY_VAULT_NAME }}
  TF_VAR_image_tag: 'latest'
  TF_VAR_prefix: 'microservice'
  TF_VAR_deploy_services: ${{ github.event.inputs.deploy_services || 'false' }}
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  apply_infra:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            }

      - name: Register Microsoft.App Resource Provider
        run: |
          az provider register --namespace Microsoft.App
          echo "Waiting for Microsoft.App registration to complete..."
          until $(az provider show -n Microsoft.App --query "registrationState" -o tsv | grep -q "Registered"); do
            echo "Still registering Microsoft.App provider..."
            sleep 10
          done
          echo "Microsoft.App provider is now registered"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.3"
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
        run: terraform init -upgrade -input=false

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
        run: terraform apply -auto-approve -input=false

      - name: Get Terraform Outputs
        working-directory: ${{ env.TERRAFORM_DIRECTORY }}
        id: tf_outputs
        run: |
          echo "acr_login_server=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
          echo "container_app_environment_default_domain=$(terraform output -raw container_app_environment_default_domain)" >> $GITHUB_OUTPUT
          echo "zipkin_url=$(terraform output -raw zipkin_url)" >> $GITHUB_OUTPUT
          echo "redis_host=$(terraform output -raw redis_host)" >> $GITHUB_OUTPUT
          # Intenta obtener URLs condicionales
          if terraform output -raw frontend_url | grep -q "Pendiente"; then
            echo "frontend_url=Pendiente" >> $GITHUB_OUTPUT
          else
            echo "frontend_url=$(terraform output -raw frontend_url)" >> $GITHUB_OUTPUT
          fi
          
          if terraform output -raw api_gateway_url | grep -q "Pendiente"; then
            echo "api_gateway_url=Pendiente" >> $GITHUB_OUTPUT
          else
            echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
          fi

      - name: Save Service Info to Azure Key Vault
        run: |
          az keyvault secret set --vault-name ${{ secrets.KEY_VAULT_NAME }} --name acr-login-server --value ${{ steps.tf_outputs.outputs.acr_login_server }}
          az keyvault secret set --vault-name ${{ secrets.KEY_VAULT_NAME }} --name container-app-domain --value ${{ steps.tf_outputs.outputs.container_app_environment_default_domain }}
          az keyvault secret set --vault-name ${{ secrets.KEY_VAULT_NAME }} --name zipkin-url --value ${{ steps.tf_outputs.outputs.zipkin_url }}
          az keyvault secret set --vault-name ${{ secrets.KEY_VAULT_NAME }} --name redis-host --value ${{ steps.tf_outputs.outputs.redis_host }}
          
          if [ "${{ steps.tf_outputs.outputs.frontend_url }}" != "Pendiente" ]; then
            az keyvault secret set --vault-name ${{ secrets.KEY_VAULT_NAME }} --name frontend-url --value ${{ steps.tf_outputs.outputs.frontend_url }}
          fi
          
          if [ "${{ steps.tf_outputs.outputs.api_gateway_url }}" != "Pendiente" ]; then
            az keyvault secret set --vault-name ${{ secrets.KEY_VAULT_NAME }} --name api-gateway-url --value ${{ steps.tf_outputs.outputs.api_gateway_url }}
          fi

      - name: Azure Logout
        run: az logout
